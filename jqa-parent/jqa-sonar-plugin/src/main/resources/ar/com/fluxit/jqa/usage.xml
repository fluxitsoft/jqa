<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (c) 2013 Flux IT.
  
  This file is part of JQA (http://github.com/fluxitsoft/jqa).
  
  JQA is free software: you can redistribute it and/or modify it 
  under the terms of the GNU Lesser General Public License as 
  published by the Free Software Foundation, either version 3 of 
  the License, or (at your option) any later version.
  
  JQA is distributed in the hope that it will be useful, but WITHOUT 
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
  or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General 
  Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public 
  License along with JQA. If not, see <http://www.gnu.org/licenses/>.
-->
<jqa_ctx:RulesContext name=""
	xmlns:jqa="http://www.fluxit.com.ar/jqa/schema/ruleset" xmlns:jqa_ctx="http://www.fluxit.com.ar/jqa/schema/rulescontext"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.fluxit.com.ar/jqa/schema/rulescontext http://raw.github.com/fluxitsoft/jqa/master/jqa-parent/jqa-ctx-factory-xmlbeans/src/main/resources/schema/rulescontext.xsd ">

	<rulesContextImport resource="attempts.xml" />
	<rulesContextImport resource="exceptions.xml" />
	<rulesContextImport resource="commons.xml" />

	<!-- RuleSet that checks the classes usage -->
	<ruleSet name="Usage ruleset">

		<!-- Service contract usages -->
		<rule name="Service contract usages"
			message="The Service contract '${type.name}' has an invalid usage. A Service contract must only use a common-type, an Entity, a Service exception or the Service super-interface"
			priority="2">
			<filterPredicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Service contract attempt" />
			<checkPredicate xsi:type="jqa:UsagePredicate">
				<predicate xsi:type="jqa:OrPredicate">
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Common type" />
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Entity attempt" />
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Service exceptions" />
					<predicate xsi:type="jqa:NamingPredicate" namePattern="${service.superType}" />
				</predicate>
			</checkPredicate>
		</rule>

		<!-- Service implementation usages -->
		<rule name="Service implementation usages"
			message="The Service implementation '${type.name}' has an invalid usage. A Service implementation must only use a common-type, an Entity, a Service or BO exception, a Service or BO contract"
			priority="2">
			<filterPredicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Service implementation attempt" />
			<checkPredicate xsi:type="jqa:UsagePredicate">
				<predicate xsi:type="jqa:OrPredicate">
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Common type" />
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Entity attempt" />
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Service exceptions" />
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="BO exceptions" />
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Service contract attempt" />
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="BO contract attempt" />
				</predicate>
			</checkPredicate>
		</rule>

		<!-- BusinessObject contract usages -->
		<rule name="BO contract usages"
			message="The BO contract '${type.name}' has an invalid usage. A BO contract must only use a common-type, an Entity, a BO exception or the BO super-interface"
			priority="2">
			<filterPredicate xsi:type="jqa:ContextProvidedPredicate" predicateName="BO contract attempt" />
			<checkPredicate xsi:type="jqa:UsagePredicate">
				<predicate xsi:type="jqa:OrPredicate">
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Common type" />
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Entity attempt" />
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="BO exceptions" />
					<predicate xsi:type="jqa:NamingPredicate" namePattern="${bo.superType}" />
				</predicate>
			</checkPredicate>
		</rule>

		<!-- BusinessObject implementation usages -->
		<rule name="BO implementation usages"
			message="The BO implementation '${type.name}' has an invalid usage. A BO implementation must only use a common-type, an Entity, a BO or DAO exception, a BO or DAO contract"
			priority="2">
			<filterPredicate xsi:type="jqa:ContextProvidedPredicate" predicateName="BO implementation attempt" />
			<checkPredicate xsi:type="jqa:UsagePredicate">
				<predicate xsi:type="jqa:OrPredicate">
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Common type" />
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Entity attempt" />
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="BO exceptions" />
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="DAO exceptions" />
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="BO contract attempt" />
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="DAO contract attempt" />
				</predicate>
			</checkPredicate>
		</rule>

		<!-- DataAccessObject contract usages -->
		<rule name="DAO contract usages"
			message="The DAO contract '${type.name}' has an invalid usage. A DAO contract must only use a common-type, an Entity, a DAO exception or the DAO super-interface"
			priority="2">
			<filterPredicate xsi:type="jqa:ContextProvidedPredicate" predicateName="DAO contract attempt" />
			<checkPredicate xsi:type="jqa:UsagePredicate">
				<predicate xsi:type="jqa:OrPredicate">
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Common type" />
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Entity attempt" />
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="DAO exceptions" />
					<predicate xsi:type="jqa:NamingPredicate" namePattern="${dao.superType}" />
				</predicate>
			</checkPredicate>
		</rule>

		<!-- DataAccessObject implementation usages -->
		<rule name="DAO implementation usages"
			message="The DAO implementation '${type.name}' has an invalid usage. A DAO implementation must only use a common-type, an Entity, a DAO exception, a DAO contract or the JDBC API"
			priority="2">
			<filterPredicate xsi:type="jqa:ContextProvidedPredicate" predicateName="DAO implementation attempt" />
			<checkPredicate xsi:type="jqa:UsagePredicate">
				<predicate xsi:type="jqa:OrPredicate">
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Common type" />
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Entity attempt" />
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="BO exceptions" />
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="DAO exceptions" />
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="DAO contract attempt" />
					<predicate xsi:type="jqa:NamingPredicate" namePattern="javax.sql.**" />
				</predicate>
			</checkPredicate>
		</rule>

		<!-- View usages -->
		<rule name="View usages"
			message="The View '${type.name}' has an invalid usage. A View must only use a common-type, an Entity, a View or BO exception, a BO contract or the View super-interface"
			priority="2">
			<filterPredicate xsi:type="jqa:ContextProvidedPredicate" predicateName="View attempt" />
			<checkPredicate xsi:type="jqa:UsagePredicate">
				<predicate xsi:type="jqa:OrPredicate">
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Common type" />
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Entity attempt" />
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="View exceptions" />
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="BO exceptions" />
					<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="BO contract attempt" />
					<predicate xsi:type="jqa:NamingPredicate" namePattern="${view.superType}" />
				</predicate>
			</checkPredicate>
		</rule>

	</ruleSet>
</jqa_ctx:RulesContext>
