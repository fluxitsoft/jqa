<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (c) 2013 Flux IT.
  
  This file is part of JQA (http://github.com/fluxitsoft/jqa).
  
  JQA is free software: you can redistribute it and/or modify it 
  under the terms of the GNU Lesser General Public License as 
  published by the Free Software Foundation, either version 3 of 
  the License, or (at your option) any later version.
  
  JQA is distributed in the hope that it will be useful, but WITHOUT 
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
  or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General 
  Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public 
  License along with JQA. If not, see <http://www.gnu.org/licenses/>.
-->
<jqa_ctx:RulesContext name=""
	xmlns:jqa="http://www.fluxit.com.ar/jqa/schema/ruleset" xmlns:jqa_ctx="http://www.fluxit.com.ar/jqa/schema/rulescontext"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.fluxit.com.ar/jqa/schema/rulescontext http://raw.github.com/fluxitsoft/jqa/master/jqa-parent/jqa-ctx-factory-xmlbeans/src/main/resources/schema/rulescontext.xsd ">

	<rulesContextImport resource="attempts.xml" />

	<!-- RuleSet that checks the classes typing -->
	<ruleSet name="Typing ruleset">

		<!-- Entity typing -->
		<rule name="Entity typing"
			message="The Entity '${type.name}' must implement '${entity.superType}'"
			priority="3">
			<filterPredicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Entity attempt" />
			<checkPredicate xsi:type="jqa:TypingPredicate">
				<predicate xsi:type="jqa:NamingPredicate" namePattern="${entity.superType}" />
			</checkPredicate>
		</rule>

		<!-- Service API typing -->
		<rule name="Service API typing"
			message="The Service API '${type.name}' must extend to '${service.superType}'"
			priority="3">
			<filterPredicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Service API attempt" />
			<checkPredicate xsi:type="jqa:TypingPredicate">
				<predicate xsi:type="jqa:NamingPredicate" namePattern="${service.superType}" />
			</checkPredicate>
		</rule>

		<!-- Service implementation typing -->
		<rule name="Service implementation typing"
			message="The Service implementation '${type.name}' must implement a valid Service API"
			priority="3">
			<filterPredicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Service implementation attempt" />
			<checkPredicate xsi:type="jqa:TypingPredicate">
				<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Service API attempt" />
			</checkPredicate>
		</rule>

		<!-- BusinessObject API typing -->
		<rule name="BO API typing"
			message="The BO API '${type.name}' must extend to '${bo.superType}'"
			priority="3">
			<filterPredicate xsi:type="jqa:ContextProvidedPredicate" predicateName="BO API attempt" />
			<checkPredicate xsi:type="jqa:TypingPredicate">
				<predicate xsi:type="jqa:NamingPredicate" namePattern="${bo.superType}" />
			</checkPredicate>
		</rule>

		<!-- BusinessObject implementation typing -->
		<rule name="BO implementation typing"
			message="The BO implementation '${type.name}' must implement a valid BO API"
			priority="3">
			<filterPredicate xsi:type="jqa:ContextProvidedPredicate" predicateName="BO implementation attempt" />
			<checkPredicate xsi:type="jqa:TypingPredicate">
				<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="BO API attempt" />
			</checkPredicate>
		</rule>

		<!-- DataAccess API typing -->
		<rule name="DAO API typing"
			message="The DAO API '${type.name}' must extend to '${dao.superType}'"
			priority="3">
			<filterPredicate xsi:type="jqa:ContextProvidedPredicate" predicateName="DAO API attempt" />
			<checkPredicate xsi:type="jqa:TypingPredicate">
				<predicate xsi:type="jqa:NamingPredicate" namePattern="${dao.superType}" />
			</checkPredicate>
		</rule>

		<!-- DataAccess implementation typing -->
		<rule name="DAO implementation typing"
			message="The DAO implementation '${type.name}' must implement a valid DAO API"
			priority="3">
			<filterPredicate xsi:type="jqa:ContextProvidedPredicate" predicateName="DAO implementation attempt" />
			<checkPredicate xsi:type="jqa:TypingPredicate">
				<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="DAO API attempt" />
			</checkPredicate>
		</rule>

	</ruleSet>
</jqa_ctx:RulesContext>
