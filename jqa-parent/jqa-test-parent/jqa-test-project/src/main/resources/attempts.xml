<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (c) 2011 Juan Ignacio Barisich.
  
  This file is part of JQA (http://github.com/jbaris/jqa).
  
  JQA is free software: you can redistribute it and/or modify it 
  under the terms of the GNU Lesser General Public License as 
  published by the Free Software Foundation, either version 3 of 
  the License, or (at your option) any later version.
  
  JQA is distributed in the hope that it will be useful, but WITHOUT 
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
  or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General 
  Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public 
  License along with JQA. If not, see <http://www.gnu.org/licenses/>.
-->
<jqa_ctx:RulesContext name=""
	xmlns:jqa="http://www.fluxit.com.ar/jqa/schema/ruleset" xmlns:jqa_ctx="http://www.fluxit.com.ar/jqa/schema/rulescontext"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.fluxit.com.ar/jqa/schema/rulescontext https://raw.github.com/jbaris/jqa/master/jqa-parent/jqa-ctx-factory-xmlbeans/src/main/resources/schema/rulescontext.xsd ">

	<!-- Classes that try to be an Entity -->
	<globalPredicate name="Entity attempt" xsi:type="jqa:AndPredicate">
		<predicate xsi:type="jqa:OrPredicate">
			<predicate xsi:type="jqa:NamingPredicate" namePattern="**.entity.**" />
			<predicate xsi:type="jqa:NamingPredicate" namePattern="**.entities.**" />
			<predicate xsi:type="jqa:NamingPredicate" namePattern="**.domain.**" />
			<predicate xsi:type="jqa:NamingPredicate" namePattern="**.model.**" />
		</predicate>
		<!-- The Entity superclass is not an attempt. Nor the exceptions -->
		<predicate xsi:type="jqa:NotPredicate">
			<predicate xsi:type="jqa:OrPredicate">
				<predicate xsi:type="jqa:NamingPredicate" namePattern="ar.com.fluxit.jqa.test.fmk.entity.Entity" />
				<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Exception"/>
			</predicate>
		</predicate>
	</globalPredicate>

	<!-- Classes that try to be a Service -->
	<globalPredicate name="Service attempt" xsi:type="jqa:AndPredicate">
		<predicate xsi:type="jqa:OrPredicate">
			<predicate xsi:type="jqa:NamingPredicate" namePattern="**Service*" />
			<predicate xsi:type="jqa:NamingPredicate" namePattern="**.service.**" />
			<predicate xsi:type="jqa:TypingPredicate">
				<predicate xsi:type="jqa:NamingPredicate" namePattern="${service.superType}" />
			</predicate>
		</predicate>
		<!-- The Service superclass is not an attempt. Nor the exceptions -->
		<predicate xsi:type="jqa:NotPredicate">
			<predicate xsi:type="jqa:OrPredicate">
				<predicate xsi:type="jqa:NamingPredicate" namePattern="${service.superType}" />
				<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Exception"/>
			</predicate>
		</predicate>
	</globalPredicate>

	<!-- Classes that try to be a Service contract -->
	<globalPredicate name="Service contract attempt" xsi:type="jqa:AndPredicate">
		<predicate xsi:type="jqa:AbstractionPredicate" abstractionType="INTERFACE" />
		<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Service attempt" />
	</globalPredicate>

	<!-- Classes that try to be a Service implementation -->
	<globalPredicate name="Service implementation attempt" xsi:type="jqa:AndPredicate">
		<predicate xsi:type="jqa:AbstractionPredicate" abstractionType="CONCRETE" />
		<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Service attempt" />
	</globalPredicate>

	<!-- Classes that try to be a BusinessObject -->
	<globalPredicate name="BO attempt" xsi:type="jqa:AndPredicate">
		<predicate xsi:type="jqa:OrPredicate">
			<predicate xsi:type="jqa:NamingPredicate" namePattern="**BusinessObject*" />
			<predicate xsi:type="jqa:NamingPredicate" namePattern="**BO*" />
			<predicate xsi:type="jqa:NamingPredicate" namePattern="**.bo.**" />
			<predicate xsi:type="jqa:TypingPredicate">
				<predicate xsi:type="jqa:NamingPredicate" namePattern="${bo.superType}" />
			</predicate>
		</predicate>
		<!-- The BusinessObject superclass is not an attempt. Nor the exceptions -->
		<predicate xsi:type="jqa:NotPredicate">
			<predicate xsi:type="jqa:OrPredicate">
				<predicate xsi:type="jqa:NamingPredicate" namePattern="${bo.superType}" />
				<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Exception"/>
			</predicate>
		</predicate>
	</globalPredicate>

	<!-- Classes that try to be a BusinessObject contract -->
	<globalPredicate name="BO contract attempt" xsi:type="jqa:AndPredicate">
		<predicate xsi:type="jqa:AbstractionPredicate" abstractionType="INTERFACE" />
		<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="BO attempt" />
	</globalPredicate>

	<!-- Classes that try to be a BusinessObject implementation -->
	<globalPredicate name="BO implementation attempt" xsi:type="jqa:AndPredicate">
		<predicate xsi:type="jqa:AbstractionPredicate" abstractionType="CONCRETE" />
		<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="BO attempt" />
	</globalPredicate>

	<!-- Classes that try to be a DataAccessObject -->
	<globalPredicate name="DAO attempt" xsi:type="jqa:AndPredicate">
		<predicate xsi:type="jqa:OrPredicate">
		    <predicate xsi:type="jqa:NamingPredicate" namePattern="**Dao*" />
			<predicate xsi:type="jqa:NamingPredicate" namePattern="**DAO*" />
			<predicate xsi:type="jqa:NamingPredicate" namePattern="**DataAccessObject*" />
			<predicate xsi:type="jqa:NamingPredicate" namePattern="**.dao.**" />
			<predicate xsi:type="jqa:TypingPredicate">
				<predicate xsi:type="jqa:NamingPredicate" namePattern="${dao.superType}" />
			</predicate>
		</predicate>
		<!-- The DataAccessObject superclass is not an attempt. Nor the exceptions -->
		<predicate xsi:type="jqa:NotPredicate">
			<predicate xsi:type="jqa:OrPredicate">
				<predicate xsi:type="jqa:NamingPredicate" namePattern="${dao.superType}" />
				<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Exception"/>
			</predicate>
		</predicate>
	</globalPredicate>

	<!-- Classes that try to be a DataAccessObject contract -->
	<globalPredicate name="DAO contract attempt" xsi:type="jqa:AndPredicate">
		<predicate xsi:type="jqa:AbstractionPredicate" abstractionType="INTERFACE" />
		<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="DAO attempt" />
	</globalPredicate>

	<!-- Classes that try to be a DataAccessObject implementation -->
	<globalPredicate name="DAO implementation attempt" xsi:type="jqa:AndPredicate">
		<predicate xsi:type="jqa:AbstractionPredicate" abstractionType="CONCRETE" />
		<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="DAO attempt" />
	</globalPredicate>

	<!-- Classes that try to be a View. Nor the exceptions -->
	<globalPredicate name="View attempt" xsi:type="jqa:AndPredicate">
		<predicate xsi:type="jqa:OrPredicate">
			<predicate xsi:type="jqa:NamingPredicate" namePattern="**.view.**" />
			<predicate xsi:type="jqa:NamingPredicate" namePattern="**.views.**" />
			<predicate xsi:type="jqa:NamingPredicate" namePattern="**.action.**" />
			<predicate xsi:type="jqa:NamingPredicate" namePattern="**.actions.**" />
		</predicate>
		<!-- The View superclass is not an attempt -->
		<predicate xsi:type="jqa:NotPredicate">
			<predicate xsi:type="jqa:OrPredicate">
				<predicate xsi:type="jqa:NamingPredicate" namePattern="${view.superType}" />
				<predicate xsi:type="jqa:ContextProvidedPredicate" predicateName="Exception"/>
			</predicate>
		</predicate>
	</globalPredicate>

</jqa_ctx:RulesContext>
